# -*- coding: utf-8 -*-
"""Gold Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mk3wLpp7XkzXDxgQyIOkph2qrB7q5a7e

Pre-processing Data for the prediction of Gold Prices:
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

gold_price=pd.read_csv("/content/gld_price_data.csv")
gold_price.head()

gold_price.shape
gold_price.info()

gold_price.isnull().sum()

gold_price.columns

gold_price.describe()

gold_price_correlation=gold_price.corr()
gold_price_correlation

plt.title("Correlation Matrix\n")
sns.heatmap(gold_price_correlation,cbar=True,square=True,fmt='.1f',annot=True,cmap='viridis')

"""Splitting into Train and Test sets:"""

x=gold_price.drop(['Date','GLD'],axis=1)
y=gold_price['GLD']

X_train, X_test, y_train, y_test = train_test_split(x,y, test_size = 0.30, random_state = 0)

y_test = list(y_test)

"""Using K-Nearest Neighbors Regressor Model:"""

from sklearn.neighbors import KNeighborsRegressor

knn=KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
prediction1=knn.predict(X_test)

mse = mean_squared_error(y_test, prediction1)
print("Mean Squared Error using KNN Model:", mse)

plt.plot(y_test, color='blue', label = 'Actual Value')
plt.plot(prediction1, color='purple', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

"""Using Linear Regression Model:"""

from sklearn.linear_model import LinearRegression

linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)
prediction2 = linear_reg.predict(X_test)

mse = mean_squared_error(y_test, prediction2)
print("Mean Squared Error using Linear Regression Model:", mse)

plt.plot(y_test, color='blue', label = 'Actual Value')
plt.plot(prediction1, color='purple', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

predictions = np.mean([prediction1, prediction2], axis=0)

mse = mean_squared_error(y_test, predictions)
variance = np.var(y_test)
relative_performance = mse/variance

print("Mean Squared Error is: ",mse)
print("Variance of Gold Price: ",variance)
print("Relative Performance: ",relative_performance)